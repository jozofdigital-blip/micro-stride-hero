import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { HabitGoalCard } from '@/components/HabitGoalCard';
import { Dashboard } from './Dashboard';
import { habitGoals, microStepsByCategory } from '@/data/habitGoals';
import { Habit, HabitCategory } from '@/types/habit';
import { ArrowLeft, Lock } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { loadHabit, saveHabit, clearHabit } from '@/utils/habitStorage';
import { toast } from '@/components/ui/use-toast';

const Index = () => {
  const [selectedHabit, setSelectedHabit] = useState<Habit | null>(null);

  useEffect(() => {
    const savedHabit = loadHabit();
    if (savedHabit) {
      setSelectedHabit(savedHabit);
    }
  }, []);

  const handleGoalSelect = (category: HabitCategory) => {
    const goal = habitGoals.find(g => g.category === category);
    if (goal?.isLocked) {
      toast({
        title: "üîí –ü—Ä–∏–≤—ã—á–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞",
        description: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ!",
        variant: "destructive",
      });
      return;
    }
    
    if (!goal) return;

    const microSteps = microStepsByCategory[category] || [];
    const newHabit: Habit = {
      id: `habit-${Date.now()}`,
      category,
      title: goal.title,
      icon: goal.icon,
      gradient: goal.gradient,
      currentDay: 1,
      streak: 0,
      microSteps: [...microSteps],
      startDate: new Date(),
      isActive: true,
    };
    
    saveHabit(newHabit);
    setSelectedHabit(newHabit);
  };

  const handleUpdateHabit = (updatedHabit: Habit) => {
    saveHabit(updatedHabit);
    setSelectedHabit(updatedHabit);
  };

  const handleResetHabit = () => {
    clearHabit();
    setSelectedHabit(null);
    toast({
      title: "üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω",
      description: "–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!",
    });
  };

  if (selectedHabit) {
    return (
      <div className="min-h-screen bg-background p-6">
        <div className="flex gap-4 mb-6">
          <Button
            variant="ghost"
            onClick={() => setSelectedHabit(null)}
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–π
          </Button>
          <Button
            variant="destructive"
            onClick={handleResetHabit}
          >
            –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
          </Button>
        </div>
        <Dashboard 
          habit={selectedHabit} 
          onUpdateHabit={handleUpdateHabit}
        />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-12">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-12"
        >
          <h1 className="text-5xl font-bold text-foreground mb-4">
            MyFocus
          </h1>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –ø—Ä–∏–≤—ã—á–∫—É –∏ —Å–ª–µ–¥—É–π –º–∏–∫—Ä–æ—à–∞–≥–∞–º –∫ –±–æ–ª—å—à–æ–π —Ü–µ–ª–∏. 
            <br />
            <span className="text-primary font-semibold">1% –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</span>
          </p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3, duration: 0.6 }}
          className="mb-8 text-center"
        >
          <h2 className="text-2xl font-semibold text-foreground mb-2">
            –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å
          </h2>
          <p className="text-muted-foreground">
            –§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–µ ‚Äî –∑–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto">
          {habitGoals.map((goal, index) => (
            <div key={goal.category} className="relative">
              <HabitGoalCard
                goal={goal}
                onClick={() => handleGoalSelect(goal.category)}
                index={index}
              />
              {goal.isLocked && (
                <div className="absolute inset-0 bg-background/80 backdrop-blur-sm rounded-lg flex items-center justify-center">
                  <div className="text-center">
                    <Lock className="w-12 h-12 text-muted-foreground mx-auto mb-2" />
                    <p className="text-sm text-muted-foreground">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</p>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.8, duration: 0.6 }}
          className="text-center mt-16 max-w-3xl mx-auto"
        >
          <div className="bg-gradient-to-r from-primary/10 via-secondary/10 to-accent/10 rounded-2xl p-8">
            <h3 className="text-2xl font-bold text-foreground mb-4">
              –ü–æ—á–µ–º—É —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞?
            </h3>
            <p className="text-muted-foreground leading-relaxed">
              –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç: —á–µ–º –º–µ–Ω—å—à–µ —Ü–µ–ª–µ–π, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞. 
              –ö–∞–∂–¥–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ –º–∏–∫—Ä–æ—à–∞–≥–∏ ‚Äî –∫—Ä–æ—à–µ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, 
              –∫–æ—Ç–æ—Ä—ã–µ –ª–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–≥—Ä–∞–¥—É. 
              –¢–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∏–≤—ã—á–∫–∞.
            </p>
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default Index;
